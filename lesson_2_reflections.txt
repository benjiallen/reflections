## What happens when you initialize a repository? Why do you need to do it?

* When you initialize you are letting git know about the files/folders that you might be interested in tracking.
* You have to start somewhere! You need to do it so that you can run the git commands over the files that you wish to track.

## How is the staging area different from the working directory and the repository? What value do you think it offers?

* The staging area is different from the working directory because the staging area is just the files that git is tracking. The working directory might contain many other files but git is only tracking those files that are in the staging directory.
* Value: 
    - helps keep things better organized. You're only tracking the history of the files you care about.

## How can you use the staging area to make sure you have one commit per logical change?

Add files you're working on to the staging area. Providing the files you're working on represent a "logical change" then your staging area will be ready for a commit to the repo.

## What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches could be useful when you are working on an experimental feature and you don't want to break your program. You create a branch and play with that branch until you've got everything working and then merge the change back in.

### Note

I need to revisit the git diff lesson. Need to remember what git diff with no arguments is doing.

## How do the diagrams help you visualize the branch structure?

Diagrams help you visualize the parent of each commit, the reachability of commits and whether a commit is within a branch.

## What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When you merge a branch into the master branch you are creating another commit and merging the changes from the feature branch into the master branch.

The diagram shows the divergence in the code and then the convergence of the code.

## What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Pros:

* Time saving. You should be able to do merges quicker
* When there is a conflict you can clearly see it. You don't have to do lots of comparison

Cons: 

* Cannot handle all cases hence conflicts
* Can get merge conflicts which you then have to resolve
* Manual merge should be very reliable assuming communication is good and you can track changes with diff